{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srika\\\\Documents\\\\GitHub\\\\grog-pdf\\\\src\\\\pages\\\\fetchColumnName.js\";\n// import axios from \"axios\";\n\n// export async function fetchColumnNames(csvFileName: string): Promise<string[]> {\n//   try {\n//     const response = await axios.post(\"/api/csv-column-names/\", {\n//       csv_file_name: csvFileName,\n//     });\n//     const { column_names } = response.data;\n//     console.log(response.data);\n//     return column_names;\n//   } catch (error) {\n//     throw new Error(\"Failed to fetch column names.\");\n//   }\n// }\nimport axios from \"axios\";\nimport ColumnBox from \"./ColumnBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport async function fetchColumnNames() {\n  try {\n    const response = await axios.get(\"http://127.0.0.1:8000/api/csv-header/\");\n    const {\n      column_names\n    } = response.data;\n    console.log(response.data);\n    return column_names;\n  } catch (error) {\n    throw new Error(\"Failed to fetch column names.\");\n  }\n}\nexport const columnFetcher = () => {\n  axios({\n    url: \"http://127.0.0.1:8000/api/csv-header/\",\n    method: \"GET\"\n  }).then(res => {\n    console.log(res);\n    return res.map(column => {\n      /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(ColumnBox, {\n          name: column,\n          link: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this)\n      }, void 0, false);\n    });\n  });\n};","map":{"version":3,"names":["axios","ColumnBox","jsxDEV","_jsxDEV","Fragment","_Fragment","fetchColumnNames","response","get","column_names","data","console","log","error","Error","columnFetcher","url","method","then","res","map","column","children","name","link","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/srika/Documents/GitHub/grog-pdf/src/pages/fetchColumnName.js"],"sourcesContent":["// import axios from \"axios\";\r\n\r\n// export async function fetchColumnNames(csvFileName: string): Promise<string[]> {\r\n//   try {\r\n//     const response = await axios.post(\"/api/csv-column-names/\", {\r\n//       csv_file_name: csvFileName,\r\n//     });\r\n//     const { column_names } = response.data;\r\n//     console.log(response.data);\r\n//     return column_names;\r\n//   } catch (error) {\r\n//     throw new Error(\"Failed to fetch column names.\");\r\n//   }\r\n// }\r\nimport axios from \"axios\";\r\nimport ColumnBox from \"./ColumnBox\";\r\n\r\nexport async function fetchColumnNames(){\r\n  try {\r\n    const response = await axios.get (\"http://127.0.0.1:8000/api/csv-header/\");\r\n    const  {column_names}  = response.data;\r\n    \r\n    console.log(response.data);\r\n    \r\n    return column_names\r\n  } catch (error) {\r\n    throw new Error(\"Failed to fetch column names.\");\r\n  }\r\n}\r\n\r\nexport const columnFetcher = () => {\r\n  axios({\r\n    url: \"http://127.0.0.1:8000/api/csv-header/\",\r\n    method: \"GET\",\r\n  }).then((res) => {\r\n    console.log(res);\r\n    return(\r\n      res.map((column)=> {\r\n        <>\r\n        <ColumnBox name={column} link={true} />\r\n        </>\r\n      })\r\n    )\r\n  });\r\n};\r\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpC,OAAO,eAAeC,gBAAgBA,CAAA,EAAE;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAE,uCAAuC,CAAC;IAC1E,MAAO;MAACC;IAAY,CAAC,GAAIF,QAAQ,CAACG,IAAI;IAEtCC,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACG,IAAI,CAAC;IAE1B,OAAOD,YAAY;EACrB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAClD;AACF;AAEA,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EACjCf,KAAK,CAAC;IACJgB,GAAG,EAAE,uCAAuC;IAC5CC,MAAM,EAAE;EACV,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;IACfR,OAAO,CAACC,GAAG,CAACO,GAAG,CAAC;IAChB,OACEA,GAAG,CAACC,GAAG,CAAEC,MAAM,IAAI;MACjB,aAAAlB,OAAA,CAAAE,SAAA;QAAAiB,QAAA,eACAnB,OAAA,CAACF,SAAS;UAACsB,IAAI,EAAEF,MAAO;UAACG,IAAI,EAAE;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,gBACrC,CAAC;IACL,CAAC,CAAC;EAEN,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}